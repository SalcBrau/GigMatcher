// <auto-generated />
using System;
using GigMatcher.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GigMatcher.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190801191125_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GigMatcher.Data.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationStatusId");

                    b.Property<Guid>("MusicianId");

                    b.Property<Guid>("OpeningId");

                    b.Property<Guid?>("PositionId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("MusicianId");

                    b.HasIndex("PositionId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatus");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.Gig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("GigEnd");

                    b.Property<DateTime>("GigStart");

                    b.Property<Guid>("GigStatusId");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<int>("NumberOfPositions");

                    b.Property<Guid>("OwnerId");

                    b.Property<decimal>("TotalPay");

                    b.HasKey("Id");

                    b.HasIndex("GigStatusId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Gigs");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.GigStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("GigStatus");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.Instrument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<Guid>("InstrumentType");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.InstrumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("InstrumentTypes");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.Musician", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Location");

                    b.Property<int>("Rating");

                    b.Property<int>("YearsPlaying");

                    b.Property<int>("YearsProfessionalExperience");

                    b.HasKey("Id");

                    b.ToTable("Musicians");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.MusicianInstrument", b =>
                {
                    b.Property<Guid>("MusicianId");

                    b.Property<Guid>("InstrumentId");

                    b.HasKey("MusicianId", "InstrumentId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("MusicianInstruments");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("GigId");

                    b.Property<Guid>("MusicianId");

                    b.Property<decimal>("Pay");

                    b.Property<Guid>("PositionStatusId");

                    b.HasKey("Id");

                    b.HasIndex("GigId");

                    b.HasIndex("MusicianId");

                    b.HasIndex("PositionStatusId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.PositionInstrument", b =>
                {
                    b.Property<Guid>("PositionId");

                    b.Property<Guid>("InstrumentId");

                    b.HasKey("PositionId", "InstrumentId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("PositionInstruments");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.PositionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PositionStatus");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.Application", b =>
                {
                    b.HasOne("GigMatcher.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GigMatcher.Data.Entities.Musician", "Musician")
                        .WithMany("Applications")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GigMatcher.Data.Entities.Position", "Position")
                        .WithMany("Applications")
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.Gig", b =>
                {
                    b.HasOne("GigMatcher.Data.Entities.GigStatus", "GigStatus")
                        .WithMany("Gigs")
                        .HasForeignKey("GigStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GigMatcher.Data.Entities.Musician", "Owner")
                        .WithMany("Gigs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.Instrument", b =>
                {
                    b.HasOne("GigMatcher.Data.Entities.InstrumentType", "Type")
                        .WithMany("Instruments")
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.MusicianInstrument", b =>
                {
                    b.HasOne("GigMatcher.Data.Entities.Instrument", "Instrument")
                        .WithMany("MusicianInstruments")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GigMatcher.Data.Entities.Musician", "Musician")
                        .WithMany("MusicianInstruments")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.Position", b =>
                {
                    b.HasOne("GigMatcher.Data.Entities.Gig", "Gig")
                        .WithMany("Positions")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GigMatcher.Data.Entities.Musician", "Musician")
                        .WithMany("Positions")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GigMatcher.Data.Entities.PositionStatus", "PositionStatus")
                        .WithMany("Positions")
                        .HasForeignKey("PositionStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GigMatcher.Data.Entities.PositionInstrument", b =>
                {
                    b.HasOne("GigMatcher.Data.Entities.Instrument", "Instrument")
                        .WithMany("PositionInstruments")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GigMatcher.Data.Entities.Position", "Position")
                        .WithMany("PositionInstruments")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
